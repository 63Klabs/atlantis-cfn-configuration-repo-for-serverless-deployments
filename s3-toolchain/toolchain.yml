# This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.

AWSTemplateFormatVersion: "2010-09-09"
Description: "Toolchain for a deployment pipeline."

Parameters:
  # Project Environment Variables and Parameters that will be passed on
  ProjectId:
    Description: "The Project ID for the application. For CodeStar this will be the same as ProjectStageId. (Minimum 2 characters, and, if it is a CodeStar project, max of 15 characters). The Stage parameter will be appended to the ProjectID and must be taken into account as the max length of ProjectID is 15 characters."
    Type: String
    AllowedPattern: "^[a-z][a-z0-9-]+$"
    ###MaxLength: 15 # Uncomment for true CodeStar projects / Commment out if you wish to have longer names available for non-CodeStar projects
    MinLength: 2
  ProjectStageId:
    Description: "The Project ID for the application with the stage appeneded (if there is a stage). If it is a CodeStar project, max of 15 characters and it will be the same as ProjectID."
    Type: String
    AllowedPattern: "^[a-z][a-z0-9-]+$"
    ###MaxLength: 15 # Uncomment for true CodeStar projects / Commment out if you wish to have longer names available for non-CodeStar projects
    MinLength: 2
    ConstraintDescription: "Must contain only lowercase alphanumeric characters, dash, or underscore, and be between 2 and 15 characters in length."
  Prefix:
    Description: Prefix to assign to resources
    Type: String
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]"
    MinLength: 3
    MaxLength: 15
    ConstraintDescription: 3 to 15 characters. Alphanumeric (upper and lower), hyphen, and underscore. Must start with a letter and must end with a letter or number.
    Default: "awscodestar" 
  DeployStage:
    Description: This project represents what stage in the CI/CD pipeline? (test, beta, stage, prod). This should be equal to the deployment stage appended to the Project ID. The project ID plus the stage value must not exceed 15 characters.
    Type: String
    AllowedPattern: "[a-z0-9]*"
    MaxLength: 12
    ConstraintDescription: Must contain only lowercase alphanumeric characters and be no more than 12 characters in length.
    Default: "master" # should match default branch - as of 3/4/2021 CodeStar still places initial commit in master
  DeployEnvironment:
    Description: What deploy/testing environment will this run under? An environment can contain mulitple stages and in coordination with run different tests. Utilize this environment variable to determine your tests and app logging levels during deploy
    Type: String
    AllowedValues: ["DEV", "TEST", "PROD"]
    ConstraintDescription: Must specify DEV, TEST, or PROD.
    Default: "DEV"

  ParameterStoreBasePath:
    Description: "Base path in Parameter store to organize parameters for this instance. This is needed so that proper permissions may be given for the app to access Parameter Store. Must either be a single '/' or begin and end with a '/'. This value, with the Project ID appended to it, will be passed to the app build process as ParameterStoreAppPath. Parameters will be stored like this: /<ParameterStoreBasePath>/<Prefix>-<ProjectStageId>/<AppParameter>"
    Type: String
    AllowedPattern: "^\\/([a-zA-Z0-9]+([\\-][a-zA-Z0-9]+)*[\\/])+$|^\\/$"
    ConstraintDescription: Must only contain alpha-numeric, dashes, or slashes. Must begin and end with a slash /.
    Default: "/"

  AlarmNotificationEmail:
    Type: String
    Description: "Email address to send a notification to when Lambda function goes into alarm"
    AllowedPattern: '^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$'
    ConstraintDescription: 'A valid email must be used to receive alarm notifications'

  # Toolchain values only
  CodeCommitRepository:
    Description: "For non-CodeStar projects, what repository will we use. Default will be Prefix-ProjectID"
    Type: String
    Default: ""
  CodeCommitBranch:
    Description: What branch of CodeCommit will be used? Typically this is the same name as the stage, but may be different if there are multiple deploys operating off the same branch.
    Type: String
    Default: "master" # should match default DeployStage - as of 3/4/2021 CodeStar still places initial commit in master

Conditions:
  IsCodeStar: !Equals 
    - !Ref Prefix
    - 'awscodestar'
  UseDefaultRepo: !Equals 
    - !Ref CodeCommitRepository
    - ''

Resources:

  # -- CodeStar CodeCommit repository - only if CodeStar --
  CodeCommitRepo:
    Condition: IsCodeStar
    Type: AWS::CodeCommit::Repository
    Description: AWS CodeCommit repository for application source code
    Properties:
      RepositoryDescription: !Sub "Repository for CodeStar Project ${ProjectId}"
      RepositoryName: !Sub "awscodestar-${ProjectId}"

  # -- CodeBuild Role --
  # Each AWS CodeBuild project requires a role for AWS CodeBuild to operate on your code.
  CodeBuildRole:
    Description: Creating service role in IAM for AWS CodeBuild
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
      Path: /
      RoleName: !Join
        - "-"
        - - !If [IsCodeStar, "CodeStarWorker", !Sub "${Prefix}Worker"]
          - !Ref ProjectStageId
          - "CodeBuild"
    Type: AWS::IAM::Role

  # -- CodeBuild Policy --
  CodeBuildPolicy:
    Description: Setting IAM policy for AWS CodeBuild role
    Properties:
      PolicyDocument:
        Statement:

          # This minimal set of permissions lets AWS CodeBuild retrieve your encrypted code artifact from Amazon S3
          # and store its logs in Amazon CloudWatch Logs.       
        - Action:
          - logs:*
          - s3:*
          - kms:GenerateDataKey*
          - kms:Encrypt
          - kms:Decrypt
          Effect: Allow
          Resource: '*'

        # These are resources you plan on accessing during build. Scope to resource names to provide only minimum access
        - Action:
          - ssm:PutParameter
          - ssm:AddTagsToResource
          - ssm:GetParameters
          - ssm:GetParameter
          - ssm:GetParametersByPath
          - ssm:ListTagsForResource
          Effect: Allow
          Resource: 
            !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStoreBasePath}${Prefix}-${ProjectStageId}/*" # no / between :parameter and path

      PolicyName: !If [ IsCodeStar, "CodeStarWorkerCodeBuildPolicy", !Sub "${Prefix}WorkerCodeBuildPolicy"]
      Roles:
      - !Ref 'CodeBuildRole'
    Type: AWS::IAM::Policy

  # -- CodeBuild Project --
  CodeBuildProject:
    DependsOn:
    - CodeBuildPolicy
    Properties:
      Artifacts:
        Packaging: zip
        Type: codepipeline
      Description: !Sub "AWS CodeStar created CodeBuild Project for ${ProjectStageId}"
      Environment:
        ComputeType: small
        # S3_BUCKET environment variable informs AWS CodeBuild where it can retrieve your code artifact.
        # You can specify any other environment variables your buildspec.yml is looking for.
        EnvironmentVariables:
        - Name: S3_BUCKET
          Value: !Ref 'S3Bucket'
        - Name: PREFIX
          Value: !Ref 'Prefix'
        - Name: PROJECT_STAGE_ID
          Value: !Ref 'ProjectStageId'
        - Name: PROJECT_ID
          Value: !Ref 'ProjectId'
        - Name: ACCOUNT_ID
          Value: !Ref 'AWS::AccountId'
        - Name: PARTITION
          Value: !Ref 'AWS::Partition'
        - Name: PARAM_STORE_PATH
          Value: !Sub '${ParameterStoreBasePath}${Prefix}-${ProjectStageId}/'
        - Name: DEPLOY_STAGE
          Value: !Ref 'DeployStage'
        - Name: DEPLOY_ENVIRONMENT
          Value: !Ref 'DeployEnvironment'
        # Replace this Docker image if necessary: https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html
        #Image: aws/codebuild/eb-nodejs-6.10.0-amazonlinux-64:4.0.0
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
      #Name: !Ref 'ProjectStageId'
      Name: !Sub '${Prefix}-${ProjectStageId}-Build'
      ServiceRole: !Ref 'CodeBuildRole'
      Source:
        Type: codepipeline
        BuildSpec: buildspec.yml # Explicitly set just to note that there should only be one buildspec (not buildspec-dev.yml or buildspec-prod.yml) which if needed to process differently for an environment, that logic should be in the buildspec and SAM template. Otherwise management of 2 or more would be difficult. We have Deploy Stage and Deploy Environment variables so use them.
    Type: AWS::CodeBuild::Project

  # -- CloudFormation Trust Role --
  # If your pipeline will create resources through AWS CloudFormation as well as deploy your source code,
  # then specify a role for AWS CloudFormation to use. These permissions dictate which runtime resources
  # AWS CloudFormation can create and modify on your behalf.
  CloudFormationTrustRole:
    Type: AWS::IAM::Role
    Description: Creating service role in IAM for AWS CloudFormation
    Properties:
      RoleName: !Join
        - "-"
        - - !If [IsCodeStar, "CodeStarWorker", !Sub "${Prefix}Worker"]
          - !Ref ProjectStageId
          - "CFRole"
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - cloudformation.amazonaws.com
      Path: /
      Policies:
      - PolicyName: CloudFormationRolePolicy
        PolicyDocument:
          Statement:
          - Action:
            - codestar:*
            Effect: Allow
            Resource: !Sub 'arn:aws:codestar:${AWS::Region}:${AWS::AccountId}:project/${ProjectStageId}*'

          - Action:
            - iam:*
            Effect: Allow
            Resource:
            - !Join 
              - ""
              - - !Sub "arn:aws:iam::${AWS::AccountId}:role/"
                - !If [IsCodeStar, "CodeStarWorker", !Sub "${Prefix}Worker"]
                - !Sub "-${ProjectStageId}-*"
            - !Join 
              - ""
              - - !Sub "arn:aws:iam::${AWS::AccountId}:role/"
                - !If [IsCodeStar, "CodeStar", !Sub "${Prefix}"]
                - !Sub "-${ProjectStageId}-*"

          - Action:
            - cloudformation:*
            Effect: Allow
            Resource: "*"
          #  Condition:
          #    StringEquals: 
          #      aws:ResourceTag/ProjectStackProjectStageID: !Sub "${AWS::Region}/${AWS::AccountId}/${Prefix}-${ProjectStageId}"

          - Action:
            - codedeploy:*
            Effect: Allow
            Resource: #"*"
              - !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:${Prefix}-${ProjectStageId}-infrastructure-*'
              - !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${Prefix}-${ProjectStageId}-*'
              - !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:*'
            # Condition:
            #   StringEquals: 
            #     aws:ResourceTag/ProjectStackProjectStageID: !Sub "${AWS::Region}/${AWS::AccountId}/${Prefix}-${ProjectStageId}"


          - Action:
            - apigateway:*
            Effect: Allow
            Resource: "*"
            # we can't use arn because the name is a random id, so we need to use a condition against the tags, but to write in YAML?
            # Condition:
            #   StringEquals: 
            #     aws:ResourceTag/ProjectStackProjectStageID: !Sub "${AWS::Region}/${AWS::AccountId}/${Prefix}-${ProjectStageId}"

          - Action:
            - s3:*
            Effect: Allow
            Resource:
            - !Join 
              - ""
              - - !Sub "arn:aws:s3:::"
                - !If [IsCodeStar, "aws-codestar", !Ref Prefix]
                - !Sub "-${AWS::Region}-${AWS::AccountId}-${ProjectStageId}/*"
            - !Join 
              - ""
              - - !Sub "arn:aws:s3:::"
                - !If [IsCodeStar, "aws-codestar", !Ref Prefix]
                - !Sub "-${AWS::Region}-${AWS::AccountId}-${ProjectStageId}-*/*"
            - !Join 
              - ""
              - - !Sub "arn:aws:s3:::"
                - !If [IsCodeStar, "aws-codestar", !Ref Prefix]
                - !Sub "-${AWS::Region}-${AWS::AccountId}-${ProjectStageId}-*"

          - Action:
            - lambda:*
            Effect: Allow
            Resource:
            - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-${ProjectStageId}-*'

          - Action:
            - dynamodb:*
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Prefix}-${ProjectStageId}-*'

          # If your template will be Accessing Parameters
          - Action:
            - ssm:GetParameters
            - ssm:GetParameter
            - ssm:GetParametersByPath
            - ssm:ListTagsForResource
            Effect: Allow
            Resource: 
              !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStoreBasePath}${Prefix}-${ProjectStageId}/*" # no / between :parameter and path

          # If your template will be creating a CloudWatch Dashboard
          - Action:
            - cloudwatch:GetDashboard
            - cloudwatch:DeleteDashboards
            - cloudwatch:PutDashboard
            - cloudwatch:TagResource
            - cloudwatch:UntagResource
            Effect: Allow
            Resource:
            - !Sub 'arn:aws:cloudwatch::${AWS::AccountId}:dashboard/${Prefix}-${ProjectStageId}-*'

          # If your template will be creating cloudwatch alarms
          - Action:
            - cloudwatch:PutMetricAlarm
            - cloudwatch:DeleteAlarm*
            - cloudwatch:TagResource
            - cloudwatch:UntagResource
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${Prefix}-${ProjectStageId}-*'

          # If your template will be creating a notification for an alarm
          - Action:
            - sns:CreateTopic
            - sns:DeleteTopic
            - sns:SetTopicAttributes
            - sns:GetTopicAttributes
            - sns:Subscribe
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${Prefix}-${ProjectStageId}-infrastructure-*'

          # If your template will be creating a LogGroup
          - Action:
            - logs:DeleteLogGroup
            - logs:DeleteRetentionPolicy
            - logs:PutRetentionPolicy
            - logs:CreateLogGroup
            - logs:TagLogGroup
            Effect: Allow
            Resource:
            - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${Prefix}-${ProjectStageId}-*'
          - Action:
            - logs:DescribeLogGroups
            Effect: Allow
            Resource: 
            - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group::*' # cannot scope down to resource


  # This policy is applied to the Amazon S3 bucket that AWS CodePipeline will use as your artifact store.
  S3ArtifactBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Description: Setting Amazon S3 bucket policy for AWS CodePipeline access
    Properties:
      Bucket: !Ref 'S3Bucket'
      PolicyDocument:
        Version: 2012-10-17
        Id: SSEAndSSLPolicy
        Statement:
# This is a recommended policy statement
# https://docs.aws.amazon.com/code-samples/latest/catalog/cloudformation-codepipeline-template-codepipeline-s3-events-yaml.yml.html
#          -
#            Sid: DenyUnEncryptedObjectUploads
#            Effect: Deny
#            Principal: '*'
#            Action: s3:PutObject
#            Resource: !Join [ '', [ !GetAtt CodePipelineArtifactStoreBucket.Arn, '/*' ] ]
#            Condition:
#              StringNotEquals: 
#                s3:x-amz-server-side-encryption: aws:kms
#          -
#            Sid: DenyInsecureConnections
#            Effect: Deny
#            Principal: '*'
#            Action: s3:*
#            Resource: !Join [ '', [ !GetAtt CodePipelineArtifactStoreBucket.Arn, '/*' ] ]
#            Condition:
#              Bool:
#                aws:SecureTransport: false

        - Action:
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:GetBucketVersioning
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Allow
          Principal:
            AWS:
            - !GetAtt 'CodePipelineTrustRole.Arn'
            # AWS CodeBuild retrieves the source code from the artifact bucket.
            - !GetAtt 'CodeBuildRole.Arn'
            # AWS CloudFormation retrieves a template file from this bucket to create
            # the runtime resources.
            - !GetAtt 'CloudFormationTrustRole.Arn'
          Resource:
          - !Sub 'arn:aws:s3:::${S3Bucket}'
          - !Sub 'arn:aws:s3:::${S3Bucket}/*'
          Sid: WhitelistedGet
        - Action:
          - s3:PutObject
          Effect: Allow
          Principal:
            AWS:
            - !GetAtt 'CodePipelineTrustRole.Arn'
            - !GetAtt 'CodeBuildRole.Arn'
          Resource:
          - !Sub 'arn:aws:s3:::${S3Bucket}'
          - !Sub 'arn:aws:s3:::${S3Bucket}/*'
          Sid: WhitelistedPut


  # -- CodePipeline artifact bucket --
  # If DeltionPolicy is set to Retain, then the s3 bucket won't be deleted when the stack is deleted
  # However, if commented out a stack deletion will fail and refer to the fact that the bucket is not
  # empty so there will be manual clean up
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete # Retain | Delete (Set to Delete because if we delete the pipeline, we don't need the bucket)
    Description: Creating Amazon S3 bucket for AWS CodePipeline artifacts
    Properties:
      BucketName: !Join
        - "-"
        - - !If [IsCodeStar, "aws-codestar", !Ref Prefix]
          - !Sub "${AWS::Region}-${AWS::AccountId}-${ProjectStageId}-deploy"
      Tags:
      - Key: Name
        Value: !Sub "${Prefix}-${ProjectStageId}-S3Bucket"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: "ExpireObjects"
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            ExpirationInDays: 30
            NoncurrentVersionExpirationInDays: 30
            Status: "Enabled" # Enable so that you purge old build artifacts - they serve no use, not even for debug

  CodePipelineTrustRole:
    Description: Creating service role in IAM for AWS CodePipeline
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Sid: 1
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          # Your pipeline will generally need permissions to store and retrieve artifacts in Amazon S3.
          # It will also need permissions to detect changes to your repository, start
          # a build against your AWS CodeBuild project, and create an AWS CloudFormation stack
          # containing your runtime resources.
          - Action:
            - s3:*
            - codecommit:*
            - codebuild:*
            - cloudformation:*
            Effect: Allow
            Resource: '*'

          - Action:
            - iam:PassRole
            Effect: Allow
            Resource:
            - !GetAtt 'CloudFormationTrustRole.Arn'
        PolicyName: !Join
          - ""
          - - !If [IsCodeStar, "CodeStarWorker", !Sub "${Prefix}Worker"]
            - "CodePipelineRolePolicy"
      RoleName: !Join
        - "-"
        - - !If [IsCodeStar, "CodeStarWorker", !Sub "${Prefix}Worker"]
          - !Ref ProjectStageId
          - "CodePipeline"
    Type: AWS::IAM::Role

  CodeDeployTrustRole:
    Description: The service role to be created in IAM for AWS CodeDeploy
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - codedeploy.amazonaws.com
      ManagedPolicyArns:
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda'
      Path: /
      RoleName: !Join
        - "-"
        - - !If [IsCodeStar, "CodeStarWorker", !Sub "${Prefix}Worker"]
          - !Ref ProjectStageId
          - "CodeDeploy"
    Type: AWS::IAM::Role

  # This sample pipeline contains three Stages: Source, Build, and Deploy.
  # The Source stage contains a single action that picks up changes from your repository.
  # The Build stage executes your AWS CodeBuild project.
  # The Deploy stage contains two actions:
  # The first action either creates a new stack / changeset containing your runtime resources.
  # The second action executes the changeset made in the previous action.
  ProjectPipeline:
    # The pipeline should only be created once all the resources it links to have been created.
    # This includes the AWS CodePipeline service role, the artifact bucket, the AWS CodeBuild build projectTemplateId,
    # and the role it will pass to AWS CloudFormation to create stacks.
    DependsOn:
    - CodePipelineTrustRole
    - S3Bucket
    - CodeBuildProject
    - CloudFormationTrustRole
    Description: Creating a deployment pipeline for your project in AWS CodePipeline
    Properties:
      ArtifactStore:
        Location: !Ref 'S3Bucket'
        Type: S3
      Name: !Sub '${Prefix}-${ProjectStageId}-Pipeline'
      #Name: !Sub "${ProjectStageId}-Pipeline"
      RoleArn: !GetAtt 'CodePipelineTrustRole.Arn'
      Stages:
      - Actions:
        - ActionTypeId:
            Category: Source
            Owner: AWS
            Provider: CodeCommit
            Version: 1
          Configuration:
            BranchName: !Ref CodeCommitBranch #RepositoryBranch
            PollForSourceChanges: false
            RepositoryName: !If [ IsCodeStar, !Sub 'awscodestar-${ProjectId}', !If [ UseDefaultRepo, !Sub '${Prefix}-${ProjectId}', !Ref CodeCommitRepository ] ] #RepositoryName
          InputArtifacts: []
          Name: ApplicationSource
          OutputArtifacts:
          - Name: !Sub "${ProjectStageId}-SourceArtifact"
          RunOrder: 1
        Name: Source
      - Actions:
        - ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: 1
          Configuration:
            ProjectName: !Sub '${Prefix}-${ProjectStageId}-Build'
          InputArtifacts:
          - Name: !Sub "${ProjectStageId}-SourceArtifact"
          Name: PackageExport
          OutputArtifacts:
          - Name: !Sub "${ProjectStageId}-BuildArtifact"
          RunOrder: 1
        Name: Build
      - Actions:
        - ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: 1
          Configuration:
            ActionMode: CHANGE_SET_REPLACE
            Capabilities: CAPABILITY_NAMED_IAM
            ChangeSetName: pipeline-changeset
            RoleArn: !GetAtt 'CloudFormationTrustRole.Arn'
            StackName: !Sub "${Prefix}-${ProjectStageId}-infrastructure"
            # These are the parameters that will be set in your AWS CloudFormation stack.
            ParameterOverrides: !Sub '{"ProjectStageId":"${ProjectStageId}","ProjectId":"${ProjectId}","Prefix":"${Prefix}","DeployStage":"${DeployStage}","DeployEnvironment":"${DeployEnvironment}","ParameterStoreAppPath":"${ParameterStoreBasePath}${Prefix}-${ProjectStageId}/","DeployRole": "${CodeDeployTrustRole.Arn}", "AlarmNotificationEmail": "${AlarmNotificationEmail}"}'
            TemplateConfiguration: !Sub '${ProjectStageId}-BuildArtifact::template-configuration.json'
            TemplatePath: !Sub "${ProjectStageId}-BuildArtifact::template-export.yml"
          Name: GenerateChangeSet
          InputArtifacts:
          - Name: !Sub "${ProjectStageId}-BuildArtifact"
          OutputArtifacts: []
          RunOrder: 1
        - ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: 1
          Configuration:
            ActionMode: CHANGE_SET_EXECUTE
            ChangeSetName: pipeline-changeset
            StackName: !Sub "${Prefix}-${ProjectStageId}-infrastructure"
          InputArtifacts: []
          Name: ExecuteChangeSet
          OutputArtifacts: []
          RunOrder: 2
        Name: Deploy
    Type: AWS::CodePipeline::Pipeline

  # This Amazon CloudWatch event rule ensures that AWS CodePipeline detects changes to your AWS CodeCommit repository
  # and starts your pipeline automatically.
  # To learn more, see the AWS CodePipeline documentation:  
  #  https://docs.aws.amazon.com/codepipeline/latest/userguide/triggering.html
  SourceEvent:
    Properties:
      Description: Rule for Amazon CloudWatch Events to detect changes to the source repository and trigger pipeline execution
      EventPattern:
        detail:
          event:
          - referenceCreated
          - referenceUpdated
          referenceName:
          - !Ref CodeCommitBranch #RepositoryBranch
          referenceType:
          - branch
        detail-type:
        - CodeCommit Repository State Change
        resources:
         - !If [ IsCodeStar, !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:awscodestar-${ProjectId}', !If [ UseDefaultRepo, !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${Prefix}-${ProjectId}', !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepository}' ] ] #RepositoryName
#        - !GetAtt 'CodeCommitRepo.Arn' #RepositoryARN # we need to allow for an existing code commit repo arn:aws:codecommit:<region>:<acct>:<baseid>
        source:
        - aws.codecommit
      Name: !Sub "${Prefix}-${ProjectStageId}-SourceEvent"
      State: ENABLED
      Targets:
      - Arn: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Prefix}-${ProjectStageId}-Pipeline'
        Id: ProjectPipelineTarget
        RoleArn: !GetAtt 'SourceEventRole.Arn'
    Type: AWS::Events::Rule

  SourceEventRole:
    Description: IAM role to allow Amazon CloudWatch Events to trigger AWS CodePipeline execution
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Sid: 1
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - codepipeline:StartPipelineExecution
            Effect: Allow
            Resource:
            - !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Prefix}-${ProjectStageId}-Pipeline"
        PolicyName: !Join
        - ""
        - - !If [IsCodeStar, "CodeStarWorker", !Sub "${Prefix}Worker"]
          - "CloudWatchEventPolicy"
      RoleName: !Join
        - "-"
        - - !If [IsCodeStar, "CodeStarWorker", !Sub "${Prefix}Worker"]
          - !Ref ProjectStageId
          - "event-rule"
    Type: AWS::IAM::Role

Outputs:
  ProjectPipeline:
    Description: "CodePipeline"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${Prefix}-${ProjectStageId}-Pipeline/view?region=${AWS::Region}"
  CodeCommitRepo:
    Description: "CodeCommitRepo"
    Value: !Join
      - ""
      - - !Sub "https://${AWS::Region}.console.aws.amazon.com/codesuite/codecommit/repositories/"
        - !If [ IsCodeStar, !Sub 'awscodestar-${ProjectId}', !If [ UseDefaultRepo, !Sub '${Prefix}-${ProjectId}', !Ref CodeCommitRepository ] ] #RepositoryName
        - !Sub "/browse?region=${AWS::Region}"