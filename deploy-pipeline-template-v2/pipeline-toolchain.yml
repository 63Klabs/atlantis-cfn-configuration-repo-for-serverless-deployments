# This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
# either express or implied. See the License for the specific language governing permissions 
# and limitations under the License.
#
# Atlantis CI/CD CodePipeline CloudFormation Template
# https://github.com/chadkluck/serverless-deploy-pipeline-atlantis
# Chad Leigh Kluck
# v2.2023-07-22 HPAD (Happy Pi Approximation Day!)
# 
# NOTE: As of v2 this toolchain no longer supports CodeStar. I just wasn't using it and including
# it complicated the set-up and learning process. The old toolchain can be found in the /deprecated
# directory for reference.
# 
# This template creates a CodePipeline triggered by commits to a CodeCommit repository to deploy 
# a simple API Gateway + Lambda web service or Event Bridge + Lambda service. It also generates
# a second CloudFormation stack in which it manages your application's infrastructure.
# 
# It creates a minimal set of IAM permissions to perform the deploy of application resources as 
# outlined under its unique CF Worker Role (which give it access to only modify its own assigned 
# infrastructure stack).
# 
# Modify this pipeline-toolchain CF template to meet your needs as you expand the number of 
# resources required by your application's infrastructure. Add permissions to the CF Worker Role 
# in order to create, modify, or delete resources in your application's infrastructure.
# 
# The CF Worker Role created and used by the Deploy Pipeline is scoped to ONLY have permission 
# to modify its own resources and Least Privilege should be maintained when defining IAM policies
# in this and subsequent templates.
# 
# (Note that there are a few IAM areas that are still under development for providing least 
# privilege. Feel free to offer code recommendations using the proper channels on the GitHub 
# repository.)
#
# Security and operational improvements will evolve and be implemented as I get the chance.
# Check the change log on the GitHub repo to keep up to date with the latest changes which you 
# may add to this template in your CloudFormation stack. If you have suggestions please submit 
# them via the proper GitHub repository channels. I check the AWS Security Hub against my stacks 
# to find areas of improvement but must prioritize.
#
# README documentation goes through installation steps. 
#
# Basically there are 6 main ideas:
# 1. Create an IAM role and policy based on the policies in iam-policy-templates (You only need to do this once for any number of pipelines)
# 2. Create a CodeCommit repository that contains this code and set up the branch you wish to deploy from. (You only need to do this once for each application or project)
# 3. Manually create a CloudFormation Deploy stack using this pipeline-toolchain.yml (README goes over filling in the parameters. There are cli-input-templates if you wish to use CLI).
# 4. Once the Deploy stack is created it will automatically grab your code from the repository branch and create the Infrastructure stack.
# 5. To deploy changes, all you need to do is commit to the monitored branch and CodePipeline will take care of the rest!
# 6. If you need to modify the way the CodePipeline performs, update this pipeline-toolchain.yml and then perform a manual stack update in CloudFormation. (Instructions in README)
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy Pipeline CloudFormation Template v2. Creates a CodePipeline for API Gateway or Event Bridge to Lambda services that watches a CodeCommit repository for changes. github.com/chadkluck/serverless-deploy-pipeline-atlantis"

# =============================================================================
# META DATA
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-interface.html
# 

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - 
        Label:
          default: "Application Resource Naming"
        Parameters:
          - Prefix
          - ProjectId
          - StageId
          - S3BucketNameOrgPrefix
      -
        Label:
          default: "Deployment Environment Identification"
        Parameters:
          - DeployEnvironment
      -
        Label:
          default: "External Resources and Alarm Notifications"
        Parameters:
          - ParameterStoreHierarchy
          - AlarmNotificationEmail
      -
        Label:
          default: "Code Repository"
        Parameters:
          - CodeCommitRepository
          - CodeCommitBranch

# =============================================================================
# PARAMETERS
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
#

Parameters:

  # ---------------------------------------------------------------------------
  # Application Resource Naming

  Prefix:
    Type: String
    Description: "Prefix to assign to resources. This can be thought of as a Name Space and will be pre-pended to all resources. Use it to identify ownership/access for teams, departments, etc. Must have a corresponding CloudFormation Service Role. Ex: 'ws-hello-world-test' the Prefix would be 'ws', ProjectId would be 'hello-world', and the StageId would be 'test'."
    Default: "atlantis" 
    AllowedPattern: "^[a-z][a-z0-9-]*[a-z0-9]$"
    MinLength: 2
    MaxLength: 8
    ConstraintDescription: "2 to 8 characters. Alphanumeric (lower case) and dashes. Must start with a letter and end with a letter or number."
  ProjectId:
    Type: String
    Description: "Do NOT include <Prefix> or <StageId>. This is the Project ID for the application. (Minimum 2 characters, suggested maximum of 20) Ex: 'ws-hello-world-test' the Prefix would be 'ws', ProjectId would be 'hello-world', and the StageId would be 'test'. If you get 'S3 bucket name too long' errors then you must shorten the Project ID or use an S3 Org Prefix. Long Project IDs may also be truncated when naming resources."
    AllowedPattern: "^[a-z][a-z0-9-]*[a-z0-9]$"
    MinLength: 2
    ConstraintDescription: "Minimum of 2 characters (suggested maximmum of 20). Alphanumeric (lower case) and dashes. Must start with a letter and end with a letter or number."
  StageId:
    Type: String
    Description: "Do NOT include <Prefix> or <ProjectId>. <StageId> does not need to match <DeployEnvironment>. You can have multiple stages in the TEST environment (e.g. test, john-test), and multiple stages in PROD (e.g. stage, beta, prod). Ex: 'ws-hello-world-test' the Prefix would be 'ws', ProjectId would be 'hello-world', and the StageId would be 'test'."
    AllowedPattern: "^[a-z][a-z0-9-]*[a-z0-9]$"
    MinLength: 2
    MaxLength: 10
    ConstraintDescription: "2 to 10 characters. Alphanumeric (lower case) and dashes. Must start with a letter and end with a letter or number."
  S3BucketNameOrgPrefix:
    Type: String
    Description: "By default, to enforce uniqueness, buckets created for deploy and infrastructure include account and region in the bucket name. However, due to S3 bucket name character limits, you can turn this off by specifying your own prefix (like an org code) that will be included before the project <Prefix> above."
    Default: ""
    AllowedPattern: "^[a-z0-9][a-z0-9-]*[a-z0-9]$|^$"
    ConstraintDescription: "May be empty or at least 2 characters long. Must start with a alphanumeric character, may contain lowercase letters, numbers, and hyphens."

  # ---------------------------------------------------------------------------
  # Deployment Environment Identification

  DeployEnvironment:
    Type: String
    Description: "What deploy/testing environment will this run under? An environment can contain multiple stages and in coordination with run different tests. Utilize this environment variable to determine your tests and app logging levels during deploy. This can be used for conditionals in the template. For example, PROD will use gradual deployment while DEV and TEST is AllAtOnce. Other resources, such as dashboards are created in PROD and not DEV or TEST. Suggested use: DEV for local SAM deployment, TEST for cloud deployment, PROD for stage, beta, and main/prod deployment."
    Default: "PROD"
    AllowedValues: ["DEV", "TEST", "PROD"]
    ConstraintDescription: "Must specify DEV, TEST, or PROD."

  # ---------------------------------------------------------------------------
  # External Resources and Alarm Notifications

  ParameterStoreHierarchy:
    Type: String
    Description: "Parameters may be organized within a hierarcy based on your organizational or operations structure. The application will create its parameters within this hierarchy. For example, /Finance/ops/ for this value would then generate /Finance/ops/<env>/<prefix>-<project_id>-<stage>/<parameterName>. Must either be a single '/' or begin and end with a '/'."
    Default: "/"
    AllowedPattern: "^\\/([a-zA-Z0-9_.-]*[\\/])+$|^\\/$"
    ConstraintDescription: "Must only contain alpha-numeric, dashes, underscores, or slashes. Must be a single slash or begin and end with a slash. (/Finance/, /Finance/ops/, or /)"
  AlarmNotificationEmail:
    Type: String
    Description: "Email address to send a notification to when Lambda function goes into alarm. Be sure to check the inbox for this email address as you will need to confirm the subscription."
    AllowedPattern: "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$"
    ConstraintDescription: "A valid email must be used to receive alarm notifications"

  # ---------------------------------------------------------------------------
  # Code Repository
  # Used only by this pipeline-toolchain and not passed on to infrastructure stack except as tags

  CodeCommitRepository:
    Type: String
    Description: "What repository will be used?"
    MinLength: 2
  CodeCommitBranch:
    Type: String
    Description: What branch of CodeCommit will be used? Typically this is the same name as the stage, but may be different if there are multiple deploys operating off the same branch.
    Default: "main"

# =============================================================================
# CONDITIONS
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-conditions.html
#

Conditions:
  UseS3BucketNameOrgPrefix: !Not [!Equals [!Ref S3BucketNameOrgPrefix, ""]]

# =============================================================================
# RESOURCES
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html  
#

Resources:

  # ---------------------------------------------------------------------------
  # -- CodeBuild Role --
  # Each AWS CodeBuild project requires a role for AWS CodeBuild to operate on your code.

  CodeBuildRole:
    Description: Creating service role in IAM for AWS CodeBuild
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
      Path: /
      RoleName: !Sub "${Prefix}-Worker-${ProjectId}-${StageId}-CodeBuild"
    Type: AWS::IAM::Role

  # ---------------------------------------------------------------------------
  # -- CodeBuild Policy --

  CodeBuildPolicy:
    Type: AWS::IAM::Policy
    Description: Setting IAM policy for AWS CodeBuild role
    Properties:
      PolicyName: !Sub "${Prefix}-Worker-CodeBuildPolicy"
      Roles: 
      - !Ref 'CodeBuildRole'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:

          # This minimal set of permissions lets AWS CodeBuild retrieve your encrypted code artifact from Amazon S3
          # and store its logs in Amazon CloudWatch Logs.       
        - Action:
          - logs:*
          - s3:*
          - kms:GenerateDataKey*
          - kms:Encrypt
          - kms:Decrypt
          Effect: Allow
          Resource: '*'

        # These are resources you plan on accessing during build. Scope to resource names to provide only minimum access (Least Privilege)
        - Action:
          - ssm:PutParameter
          - ssm:AddTagsToResource
          - ssm:GetParameters
          - ssm:GetParameter
          - ssm:GetParametersByPath
          - ssm:ListTagsForResource
          Effect: Allow
          Resource: 
            !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStoreHierarchy}${DeployEnvironment}/${Prefix}-${ProjectId}-${StageId}/*"


  # ---------------------------------------------------------------------------
  # -- CodeBuild Project --

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn:
    - CodeBuildPolicy
    Properties:
      Name: !Sub '${Prefix}-${ProjectId}-${StageId}-Build'
      Description: !Sub "CodeBuild Project for ${ProjectId}-${StageId}"
      ServiceRole: !Ref 'CodeBuildRole'
      Artifacts:
        Packaging: zip
        Type: codepipeline
      Environment:
        # ComputeType, Type, Image and the Build Runtime versions all rely on each other
        # ComputeType and Environment Type: https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html
        # Build runtime versions: https://docs.aws.amazon.com/codebuild/latest/userguide/runtime-versions.html
        #                         https://docs.aws.amazon.com/codebuild/latest/userguide/available-runtimes.html
        ComputeType: small
        Type: LINUX_CONTAINER

        # Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0 # Node 12
        # Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0 # Node 16 / Python 3.9
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0 # Node 18 / Python 3.11
        # Image: aws/codebuild/java:openjdk-11 # java

        # BUILD ENVIRONMENT VARIABLES : You can specify any other environment variables your buildspec.yml is looking for.
        EnvironmentVariables:
        - Name: AWS_PARTITION
          Value: !Ref 'AWS::Partition'
        - Name: AWS_REGION
          Value: !Ref 'AWS::Region'
        - Name: AWS_ACCOUNT
          Value: !Ref 'AWS::AccountId'
        - Name: S3_DEPLOY_BUCKET # informs AWS CodeBuild where it can retrieve your code artifact.
          Value: !Ref 'S3DeployBucket'
        - Name: PREFIX
          Value: !Ref 'Prefix'
        - Name: PROJECT_ID
          Value: !Ref 'ProjectId'
        - Name: STAGE_ID
          Value: !Ref 'StageId'
        - Name: REPOSITORY
          Value: !Ref 'CodeCommitRepository'
        - Name: REPOSITORY_BRANCH
          Value: !Ref 'CodeCommitBranch'
        - Name: PARAM_STORE_HIERARCHY
          Value: !Sub '${ParameterStoreHierarchy}${DeployEnvironment}/${Prefix}-${ProjectId}-${StageId}/'
        - Name: DEPLOY_ENVIRONMENT
          Value: !Ref 'DeployEnvironment'
        - Name: ALARM_NOTIFICATION_EMAIL
          Value: !Ref 'AlarmNotificationEmail'
      Source:
        Type: codepipeline
        BuildSpec: buildspec.yml # Explicitly set just to note that there should only be one buildspec (not buildspec-dev.yml or buildspec-prod.yml) which if needed to process differently for an environment, that logic should be in the buildspec and SAM template. Otherwise management of 2 or more would be difficult. We have Deploy Stage and Deploy Environment variables so use them.

  # ---------------------------------------------------------------------------
  # -- Log Group for CodeBuild Project --
  # -- (Just so we can add a retention policy)

  CodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${Prefix}-${ProjectId}-${StageId}-Build"
      RetentionInDays: 90 # Set to your own retention policy - how long do you want to keep build logs?

  # ---------------------------------------------------------------------------
  # -- CloudFormation Trust Role / Worker CF Role --
  # These permissions dictate which runtime resources AWS CloudFormation can create and modify 
  # in your application's infrastructure stack.
  CloudFormationTrustRole:
    Type: AWS::IAM::Role
    Description: Creating service role in IAM for AWS CloudFormation
    Properties:
      RoleName: !Sub "${Prefix}-Worker-${ProjectId}-${StageId}-CFRole"
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - cloudformation.amazonaws.com
      Path: /
      Policies:
      - PolicyName: CloudFormationRolePolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:

          - Sid: "IAMCRUDWorkerThisDeploymentOnly"
            Action:
            - iam:*
            Effect: Allow
            Resource: 
            - !Sub "arn:aws:iam::${AWS::AccountId}:role/${Prefix}-Worker-${ProjectId}-${StageId}-*"
            - !Sub "arn:aws:iam::${AWS::AccountId}:role/${Prefix}-${ProjectId}-${StageId}-*"

          - Sid: "CloudFormationCRUD"
            Action:
            - cloudformation:*
            Effect: Allow
            Resource: "*" # TODO Needs to be scoped down - tags?
          #  Condition:
          #    StringEquals: 
          #      aws:ResourceTag/ProjectStackProjectStageID: !Sub "${AWS::Region}/${AWS::AccountId}/${Prefix}-${ProjectId}-${StageId}"

          - Sid: "CodeDeployCRUDThisDeploymentOnly"
            Action:
            - codedeploy:*
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:${Prefix}-${ProjectId}-${StageId}-infrastructure-*'
              - !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${Prefix}-${ProjectId}-${StageId}-*'
              - !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:*' # TODO needs to be scoped down - tags?
            # Condition:
            #   StringEquals: 
            #     aws:ResourceTag/ProjectStackProjectStageID: !Sub "${AWS::Region}/${AWS::AccountId}/${Prefix}-${ProjectId}-${StageId}"


          # == API GateWay == If application infrastructure is using API GateWay to trigger Lambda Function
          - Sid: "APIGateWayCRUD"
            Action:
            - apigateway:*
            Effect: Allow
            Resource: "*" # needs to be scoped down - use of tags?
            # we can't use arn because the name is a random id, so we need to use a condition against the tags, but to write in YAML?
            # Condition:
            #   StringEquals: 
            #     aws:ResourceTag/ProjectStackProjectStageID: !Sub "${AWS::Region}/${AWS::AccountId}/${Prefix}-${ProjectId}-${StageId}"


          # # == Event Bridge == If application infrastructure is using Event Bridge to trigger Lambda function
          # - Sid: "EventRuleManageThisDeploymentOnly"
          #   Action:
          #   - events:PutRule
          #   - events:DeleteRule
          #   - events:DescribeRule
          #   - events:PutTargets
          #   - events:RemoveTargets
          #   Effect: Allow
          #   Resource:
          #   - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${Prefix}-${ProjectId}-${StageId}-*'


          # == S3 Buckets == If application infrastructure manages S3 buckets
          - Sid: "S3CRUDThisDeploymentOnly"
            Action:
            - s3:*
            Effect: Allow
            Resource:
            - !Join
              - ""
              - - "arn:aws:s3:::"
                - !If [UseS3BucketNameOrgPrefix, !Sub "${S3BucketNameOrgPrefix}-${Prefix}", !Sub "${Prefix}-${AWS::Region}-${AWS::AccountId}" ]
                - !Sub "-${ProjectId}-${StageId}/*"
            - !Join
              - ""
              - - "arn:aws:s3:::"
                - !If [UseS3BucketNameOrgPrefix, !Sub "${S3BucketNameOrgPrefix}-${Prefix}", !Sub "${Prefix}-${AWS::Region}-${AWS::AccountId}" ]
                - !Sub "-${ProjectId}-${StageId}-*/*"
            - !Join
              - ""
              - - "arn:aws:s3:::"
                - !If [UseS3BucketNameOrgPrefix, !Sub "${S3BucketNameOrgPrefix}-${Prefix}", !Sub "${Prefix}-${AWS::Region}-${AWS::AccountId}" ]
                - !Sub "-${ProjectId}-${StageId}-*"

          # == S3 Buckets == If application infrastructure manages a Lambda function
          - Sid: "LambdaCRUDThisDeploymentOnly"
            Action:
            - lambda:*
            Effect: Allow
            Resource:
            - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-${ProjectId}-${StageId}-*'

          # == Lambda Insights == If application infrastructure utilizes Lambda Insights for tracing and troubleshooting
          - Sid: "LambdaLayersGetLayerForLambdaInsightsFromAWS"
            Action:
            - lambda:GetLayerVersion
            Effect: Allow
            Resource:
            - 'arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:*' # update account and region
            # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-extension-versions.html

          # == DynamoDb == If application infrastructure manages a DynamoDb resource
          - Sid: "DynamoDbCRUDThisDeploymentOnly"
            Action:
            - dynamodb:*
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Prefix}-${ProjectId}-${StageId}-*'

          # == SSM Parameter Store == If application infrastructure accesses SSM parameter store
          - Sid: "SSMParameterStoreReadThisDeploymentOnly"
            Action:
            - ssm:GetParameters
            - ssm:GetParameter
            - ssm:GetParametersByPath
            - ssm:ListTagsForResource
            Effect: Allow
            Resource: 
              !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStoreHierarchy}${DeployEnvironment}/${Prefix}-${ProjectId}-${StageId}/*"

          - Sid: "CloudWatchDashboardLimitedCRUDThisDeploymentOnly"
            Action:
            - cloudwatch:GetDashboard
            - cloudwatch:DeleteDashboards
            - cloudwatch:PutDashboard
            - cloudwatch:TagResource
            - cloudwatch:UntagResource
            Effect: Allow
            Resource:
            - !Sub 'arn:aws:cloudwatch::${AWS::AccountId}:dashboard/${Prefix}-${ProjectId}-${StageId}-*'

          - Sid: "CloudWatchAlarmsLimitedCRUDThisDeploymentOnly"
            Action:
            - cloudwatch:PutMetricAlarm
            - cloudwatch:DeleteAlarm*
            - cloudwatch:TagResource
            - cloudwatch:UntagResource
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${Prefix}-${ProjectId}-${StageId}-*'

          - Sid: "SNSForAlarmNotificationsLimitedCRUDThisDeploymentOnly"
            Action:
            - sns:ListSubscriptionsByTopic
            - sns:CreateTopic
            - sns:DeleteTopic
            - sns:SetTopicAttributes
            - sns:GetTopicAttributes
            - sns:Subscribe
            - sns:UntagResource
            - sns:TagResource            
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${Prefix}-${ProjectId}-${StageId}-infrastructure-*'

          - Sid: "LogGroupsLimitedCRUDThisDeploymentOnly"
            Action:
            - logs:DeleteLogGroup
            - logs:DeleteRetentionPolicy
            - logs:PutRetentionPolicy
            - logs:CreateLogGroup
            - logs:TagLogGroup
            Effect: Allow
            Resource:
            - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${Prefix}-${ProjectId}-${StageId}-*'
            
          - Sid: "LogGroupsReadThisDeploymentOnly"
            Action:
            - logs:DescribeLogGroups
            Effect: Allow
            Resource: 
            - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group::*' # cannot scope down to resource


  # ---------------------------------------------------------------------------
  # -- S3 Artifact Bucket Policy --
  # This policy is applied to the Amazon S3 bucket that AWS CodePipeline will use as your artifact store.

  S3ArtifactBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Description: Setting Amazon S3 bucket policy for AWS CodePipeline access
    Properties:
      Bucket: !Ref 'S3DeployBucket'
      PolicyDocument:
        Version: "2012-10-17"
        Id: SSEAndSSLPolicy
        Statement:

        # # This is a recommended policy statement
        # # https://docs.aws.amazon.com/code-samples/latest/catalog/cloudformation-codepipeline-template-codepipeline-s3-events-yaml.yml.html
        #  -
        #    Sid: DenyUnEncryptedObjectUploads
        #    Effect: Deny
        #    Principal: '*'
        #    Action: s3:PutObject
        #    Resource: !Join [ '', [ !GetAtt CodePipelineArtifactStoreBucket.Arn, '/*' ] ]
        #    Condition:
        #      StringNotEquals: 
        #        s3:x-amz-server-side-encryption: aws:kms

        - Sid: "DenyNonSecureTransportAccess"
          Effect: Deny
          Principal: "*"
          Action: "s3:*"
          Resource:
            - !GetAtt S3DeployBucket.Arn
            - !Join [ '', [ !GetAtt S3DeployBucket.Arn, '/*' ] ]
          Condition:
            Bool:
                "aws:SecureTransport": false

        - Sid: WhitelistedGet
          Action:
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:GetBucketVersioning
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Allow
          Principal:
            AWS:
            - !GetAtt 'CodePipelineTrustRole.Arn'
            # AWS CodeBuild retrieves the source code from the artifact bucket.
            - !GetAtt 'CodeBuildRole.Arn'
            # AWS CloudFormation retrieves a template file from this bucket to create
            # the runtime resources.
            - !GetAtt 'CloudFormationTrustRole.Arn'
          Resource:
            - !GetAtt S3DeployBucket.Arn
            - !Join [ '', [ !GetAtt S3DeployBucket.Arn, '/*' ] ]
          
        - Sid: WhitelistedPut
          Action:
          - s3:PutObject
          Effect: Allow
          Principal:
            AWS:
            - !GetAtt 'CodePipelineTrustRole.Arn'
            - !GetAtt 'CodeBuildRole.Arn'
          Resource:
            - !GetAtt S3DeployBucket.Arn
            - !Join [ '', [ !GetAtt S3DeployBucket.Arn, '/*' ] ]
          

  # ---------------------------------------------------------------------------
  # -- S3 Artifact Bucket --

  S3DeployBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete # Set to Delete because if we delete the pipeline, we don't need the bucket
    Description: Creating Amazon S3 bucket for AWS CodePipeline artifacts
    Properties:
      BucketName: !Join
        - "-"
        - - !If [UseS3BucketNameOrgPrefix, !Sub "${S3BucketNameOrgPrefix}-${Prefix}", !Sub "${Prefix}-${AWS::Region}-${AWS::AccountId}" ]
          - !Sub "${ProjectId}-${StageId}-deploy"
      Tags:
      - Key: Name
        Value: !Sub "${Prefix}-${ProjectId}-${StageId}-Artifacts"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: "ExpireObjects"
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            ExpirationInDays: 366
            NoncurrentVersionExpirationInDays: 30
            Status: "Enabled" # Enable so that you purge old build artifacts - they serve no use, not even for debug and it saves space and $$$

  # ---------------------------------------------------------------------------
  # -- CodePipeline Trust Role --

  CodePipelineTrustRole:
    DependsOn:
    - S3DeployBucket
    - CloudFormationTrustRole
    Type: AWS::IAM::Role
    Description: Creating service role in IAM for AWS CodePipeline
    Properties:
      RoleName: !Sub "${Prefix}-Worker-${ProjectId}-${StageId}-CodePipeline"
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Sid: 1
      Path: /
      Policies:
      - PolicyName: !Sub "${Prefix}-Worker-${ProjectId}-${StageId}-CodePipelineRolePolicy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          # Your pipeline will generally need permissions to store and retrieve artifacts in Amazon S3.
          # It will also need permissions to detect changes to your repository, start
          # a build against your AWS CodeBuild project, and create an AWS CloudFormation stack
          # containing your runtime resources.

          - Sid: CloudFormationManagementViaCloudFormation
            Action:
            - cloudformation:*
            Effect: Allow
            Resource: 
            - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Prefix}-${ProjectId}-${StageId}-infrastructure/*"
            - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset/${Prefix}-${ProjectId}-${StageId}-infrastructure:*"

          - Sid: CodeBuildManagementViaCloudFormation
            Action:
            - codebuild:*
            Effect: Allow
            Resource: 
            - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*" # TODO: Scope Down
            - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${Prefix}-${ProjectId}-${StageId}-Build"

          - Sid: S3ManagementViaCloudFormation
            Action:
            - s3:*
            Effect: Allow
            Resource:
            - !GetAtt S3DeployBucket.Arn
            - !Join [ '', [ !GetAtt S3DeployBucket.Arn, '/*' ] ]

          - Sid: CodeCommitReadOnly
            Action:
            - codecommit:GetRepositoryTriggers
            - codecommit:GitPull
            - codecommit:GetObjectIdentifier
            - codecommit:GetFolder
            - codecommit:GetFile
            - codecommit:GetRepository
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:UploadArchive
            - codecommit:GetUploadArchiveStatus
            Effect: Allow
            Resource: !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepository}'

          - Sid: PassRole
            Action:
            - iam:PassRole
            Effect: Allow
            Resource:
            - !GetAtt 'CloudFormationTrustRole.Arn'

  # ---------------------------------------------------------------------------
  # -- CodeDeploy Trust Role --

  CodeDeployTrustRole:
    Type: AWS::IAM::Role
    Description: The service role to be created in IAM for AWS CodeDeploy
    Properties:
      RoleName: !Sub "${Prefix}-Worker-${ProjectId}-${StageId}-CodeDeploy"
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - codedeploy.amazonaws.com
      ManagedPolicyArns:
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda'

  # ---------------------------------------------------------------------------
  # -- ProjectPipeline --
  # Using the resources defined above, the pipeline and it's parts is what 
  # moves things along

  # This pipeline contains three Stages: Source, Build, and Deploy.
  # - Source stage contains a single action that picks up changes from your repository.
  # - Build stage executes your AWS CodeBuild project.
  # - Deploy stage contains two actions:
  #   - The first action either creates a new stack / changeset containing your runtime resources.
  #   - The second action executes the changeset made in the previous action.

  ProjectPipeline:
    # The pipeline should only be created once all the resources it links to have been created.
    # This includes the AWS CodePipeline service role, the artifact bucket, the AWS CodeBuild build projectTemplateId,
    # and the role it will pass to AWS CloudFormation to create stacks.
    DependsOn:
    - CodePipelineTrustRole
    - S3DeployBucket
    - CodeBuildProject
    - CloudFormationTrustRole
    Type: AWS::CodePipeline::Pipeline
    Description: Creating a deployment pipeline for your project in AWS CodePipeline
    Properties:
      Name: !Sub '${Prefix}-${ProjectId}-${StageId}-Pipeline'
      ArtifactStore:
        Location: !Ref 'S3DeployBucket'
        Type: S3
      RoleArn: !GetAtt 'CodePipelineTrustRole.Arn'
      Stages:
      -
        Name: Source
        Actions:
        -
          Name: ApplicationSource
          ActionTypeId:
            Category: Source
            Owner: AWS
            Provider: CodeCommit
            Version: 1
          Configuration:
            BranchName: !Ref CodeCommitBranch #RepositoryBranch
            PollForSourceChanges: false
            RepositoryName: !Ref CodeCommitRepository
          InputArtifacts: []
          OutputArtifacts:
          - Name: !Sub "${ProjectId}-${StageId}-SourceArtifact"
          RunOrder: 1
      -
        Name: Build
        Actions:
        -
          Name: PackageExport
          ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: 1
          Configuration:
            ProjectName: !Sub '${Prefix}-${ProjectId}-${StageId}-Build'
          InputArtifacts:
          - Name: !Sub "${ProjectId}-${StageId}-SourceArtifact"
          OutputArtifacts:
          - Name: !Sub "${ProjectId}-${StageId}-BuildArtifact"
          RunOrder: 1
      -
        Name: Deploy
        Actions:
        -
          Name: GenerateChangeSet
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: 1
          Configuration:
            StackName: !Sub "${Prefix}-${ProjectId}-${StageId}-infrastructure"
            ActionMode: CHANGE_SET_REPLACE
            Capabilities: CAPABILITY_NAMED_IAM
            ChangeSetName: pipeline-changeset
            RoleArn: !GetAtt 'CloudFormationTrustRole.Arn'
            # These are the parameters that will be set in your AWS CloudFormation stack.
            ParameterOverrides: !Sub '{
              "Prefix": "${Prefix}",
              "ProjectId": "${ProjectId}",
              "StageId": "${StageId}",
              "S3BucketNameOrgPrefix": "${S3BucketNameOrgPrefix}",
              "DeployEnvironment": "${DeployEnvironment}",
              "ParameterStoreHierarchy": "${ParameterStoreHierarchy}${DeployEnvironment}/${Prefix}-${ProjectId}-${StageId}/",
              "DeployRole": "${CodeDeployTrustRole.Arn}",
              "AlarmNotificationEmail": "${AlarmNotificationEmail}"
            }'
            TemplateConfiguration: !Sub '${ProjectId}-${StageId}-BuildArtifact::template-configuration.json'
            TemplatePath: !Sub "${ProjectId}-${StageId}-BuildArtifact::template-export.yml"
          InputArtifacts:
          - Name: !Sub "${ProjectId}-${StageId}-BuildArtifact"
          OutputArtifacts: []
          RunOrder: 1
        -
          Name: ExecuteChangeSet
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: 1
          Configuration:
            ActionMode: CHANGE_SET_EXECUTE
            ChangeSetName: pipeline-changeset
            StackName: !Sub "${Prefix}-${ProjectId}-${StageId}-infrastructure"
          InputArtifacts: []
          OutputArtifacts: []
          RunOrder: 2

  # This Amazon CloudWatch event rule ensures that AWS CodePipeline detects changes to your AWS CodeCommit repository
  # and starts your pipeline automatically.
  # To learn more, see the AWS CodePipeline documentation:  
  #  https://docs.aws.amazon.com/codepipeline/latest/userguide/triggering.html
  SourceEvent:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${Prefix}-${ProjectId}-${StageId}-SourceEvent"
      Description: Rule for Amazon CloudWatch Events to detect changes to the source repository and trigger pipeline execution
      EventPattern:
        detail:
          event:
          - referenceCreated
          - referenceUpdated
          referenceName: 
          - !Ref CodeCommitBranch
          referenceType:
          - branch
        detail-type:
        - CodeCommit Repository State Change
        resources:
        - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepository}'
        source:
        - aws.codecommit
      State: ENABLED
      Targets:
      - Arn: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Prefix}-${ProjectId}-${StageId}-Pipeline'
        Id: ProjectPipelineTarget
        RoleArn: !GetAtt 'SourceEventRole.Arn'

  SourceEventRole:
    Type: AWS::IAM::Role
    Description: IAM role to allow Amazon CloudWatch Events to trigger AWS CodePipeline execution
    Properties:
      RoleName: !Sub "${Prefix}-Worker-${ProjectId}-${StageId}-event-rule"
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Sid: 1
      Policies:
      - PolicyName: !Sub "${Prefix}-Worker-CloudWatchEventPolicy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Action:
            - codepipeline:StartPipelineExecution
            Effect: Allow
            Resource:
            - !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Prefix}-${ProjectId}-${StageId}-Pipeline"

# =============================================================================
# OUTPUTS
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
#
# Place anything interesting that you would like to quickly refer to in 
# your cloudformation OUTPUT section. Test URLs, direct links to resources, etc
#

Outputs:
  ProjectPipeline:
    Description: "CodePipeline"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${Prefix}-${ProjectId}-${StageId}-Pipeline/view?region=${AWS::Region}"
  CodeCommitRepo:
    Description: "CodeCommitRepo"
    Value: !Join
      - ""
      - - !Sub "https://${AWS::Region}.console.aws.amazon.com/codesuite/codecommit/repositories/"
        - !Ref CodeCommitRepository
        - !Sub "/browse?region=${AWS::Region}"